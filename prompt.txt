Below is my code. Make necessary changes so that:

1. The cursor scales up (scaling by 1.5) when hovering over the text
2. The text has a magnetic effect; details below.
    + The text follows the cursor, but with intense damping.
    + The text moves 5% of the distance the cursor moves.
    + This effect is only triggered once the cursor is within 50px of the text.
    + Once the cursor exits, the text returns to its original position.

--- App.jsx

import { Canvas } from "@react-three/fiber";
import Cursor from "./Cursor";
import TextDistort from "./TextDistort";
import { Environment } from "@react-three/drei";

export default function App() {
    return (
        <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>
            <ambientLight intensity={1} />
            <Environment preset="city" />
            <Cursor/>
            <TextDistort/>
        </Canvas>
    );
}

--- Cursor.jsx

import { useThree, useFrame } from "@react-three/fiber";
import { MeshTransmissionMaterial } from "@react-three/drei";
import { useRef, useState, useEffect } from "react";
import { gsap } from "gsap";

export default function Cursor({ hoverRef }) {
  const meshRef = useRef();
  const { viewport } = useThree();
  const [target, setTarget] = useState({ x: 0, y: 0 });

  useFrame(() => {
    if (!meshRef.current) return;

    // Smooth follow animation
    gsap.to(meshRef.current.position, {
      x: target.x,
      y: target.y,
      duration: 0.17,
      ease: "power2.out",
    });

  });

  useEffect(() => {
    const handleMouseMove = (e) => {
      const x = (e.clientX / window.innerWidth) * 2 - 1;
      const y = -(e.clientY / window.innerHeight) * 2 + 1;
      setTarget({
        x: x * viewport.width / 2,
        y: y * viewport.height / 2,
      });
    };

    window.addEventListener("mousemove", handleMouseMove);

    // Attach hover listeners if ref is provided
    if (hoverRef?.current) {
      hoverRef.current.addEventListener("mouseenter", handleMouseEnter);
      hoverRef.current.addEventListener("mouseleave", handleMouseLeave);
    }

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      if (hoverRef?.current) {
        hoverRef.current.removeEventListener("mouseenter", handleMouseEnter);
        hoverRef.current.removeEventListener("mouseleave", handleMouseLeave);
      }
    };
  }, [hoverRef, viewport]);

  return (
    <mesh ref={meshRef}>
      <sphereGeometry args={[0.12, 32, 32]} />
      <MeshTransmissionMaterial
        thickness={0.13}
        roughness={0.01}
        transmission={1}
        ior={1.2}
        chromaticAberration={0.03}
        anisotropy={0.1}
        distortion={0.2}
        distortionScale={0.2}
        temporalDistortion={0.2}
      />
    </mesh>
  );
}

--- TextDistort.jsx

// src/TextDistort.jsx
import { Text } from "@react-three/drei";
import Inter from "./assets/Inter.ttf";

export default function TextDistort({ onHoverChange }) {

    return (
        <Text
            position={[0, 0, 0]}
            font={Inter}
            fontSize={0.5}
            letterSpacing={-0.07} // -2% spacing
            color="#ffffff"
            anchorX="center"
            anchorY="middle"
            sdfGlyphSize={512} // Higher for better detail, lower for performanceÃŸ
            onPointerOver={() => onHoverChange(true)}
            onPointerOut={() => onHoverChange(false)}
        >
            Hover Me
        </Text>
    );
}

